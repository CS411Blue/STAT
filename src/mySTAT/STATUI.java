/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mySTAT;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.table.TableColumn;

/**
 *
 * @author Christian
 */
public class STATUI extends javax.swing.JFrame {

    /**
     * Creates new form STATUI
     */
    public ArrayList<Stakeholder> Stakeholders;
    public ArrayList<Stakeholder> OriginalStakeholders;
    public STATUI() {
        super("STAT");
//        ImageIcon statIcon = new ImageIcon(getClass().getResource("/mySTAT/logo.png"));
//        setIconImage(statIcon.getImage());
        this.Stakeholders = new ArrayList<>();
        this.OriginalStakeholders = new ArrayList<>();
        miniMapCreated = false;
        testWindow();
        
        initComponents();

        securityDialogBox = new SecurityJDialog(this, "Security", true);
        password = new String();
        isEncrypted = false;
    }
    private boolean mouseListenerExists = false;
    private boolean saveMenuItemIsUsed = false;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        openFileChooser = new javax.swing.JFileChooser();
        saveFileChooser = new javax.swing.JFileChooser();
        stakeholdersPanel = new javax.swing.JPanel();
        PowerbuttonGroup = new javax.swing.ButtonGroup();
        LegitimacybuttonGroup = new javax.swing.ButtonGroup();
        UrgencybuttonGroup = new javax.swing.ButtonGroup();
        CooperationbuttonGroup = new javax.swing.ButtonGroup();
        ThreatbuttonGroup = new javax.swing.ButtonGroup();
        SHPowerButtons = new javax.swing.ButtonGroup();
        SHLegitimacyButtons = new javax.swing.ButtonGroup();
        SHUrgencyButtons = new javax.swing.ButtonGroup();
        SHCooperationButtons = new javax.swing.ButtonGroup();
        SHThreatButtons = new javax.swing.ButtonGroup();
        mainTabbedPane = new javax.swing.JTabbedPane();
        StakeholdersPanel = new javax.swing.JPanel();
        NameLabel = new javax.swing.JLabel();
        WantsScrollPane = new javax.swing.JScrollPane();
        WantsTextArea = new javax.swing.JTextArea();
        WantsLabel = new javax.swing.JLabel();
        PowerYRadioButton = new javax.swing.JRadioButton();
        PowerNRadioButton = new javax.swing.JRadioButton();
        LegitimacyYRadioButton = new javax.swing.JRadioButton();
        LegitimacyNRadioButton = new javax.swing.JRadioButton();
        UrgencyYRadioButton = new javax.swing.JRadioButton();
        UrgencyNRadioButton = new javax.swing.JRadioButton();
        PowerLabel = new javax.swing.JLabel();
        LegitimacyLabel = new javax.swing.JLabel();
        UrgencyLabel = new javax.swing.JLabel();
        NameScrollPane = new javax.swing.JScrollPane();
        NameTextArea = new javax.swing.JTextArea();
        CooperationYRadioButton = new javax.swing.JRadioButton();
        CooperationNRadioButton = new javax.swing.JRadioButton();
        ThreatYRadioButton = new javax.swing.JRadioButton();
        ThreatNRadioButton = new javax.swing.JRadioButton();
        CooperationLabel = new javax.swing.JLabel();
        ThreatLabel = new javax.swing.JLabel();
        PotentialLabel = new javax.swing.JLabel();
        StakeholderScrollPane = new javax.swing.JScrollPane();
        StakeholderList = new javax.swing.JList();
        AddStakeholderButton = new javax.swing.JButton();
        SHPanel = new javax.swing.JPanel();
        SHPotentialLabel = new javax.swing.JLabel();
        SHWantsScrollPane = new javax.swing.JScrollPane();
        SHWantsTextArea = new javax.swing.JTextArea();
        SHCooperationLabel = new javax.swing.JLabel();
        SHRemoveButton = new javax.swing.JButton();
        SHLegitimacyNRadioButton = new javax.swing.JRadioButton();
        SHUrgencyLabel = new javax.swing.JLabel();
        SHThreatNRadioButton = new javax.swing.JRadioButton();
        SHCooperationNRadioButton = new javax.swing.JRadioButton();
        SHPowerNRadioButton = new javax.swing.JRadioButton();
        SHWantsLabel = new javax.swing.JLabel();
        SHThreatYRadioButton = new javax.swing.JRadioButton();
        SHCooperationYRadioButton = new javax.swing.JRadioButton();
        SHEditButton = new javax.swing.JButton();
        SHPowerLabel = new javax.swing.JLabel();
        SHUrgencyNRadioButton = new javax.swing.JRadioButton();
        SHNameScrollPane = new javax.swing.JScrollPane();
        SHNameTextArea = new javax.swing.JTextArea();
        SHLegitimacyYRadioButton = new javax.swing.JRadioButton();
        SHLegitimacyLabel = new javax.swing.JLabel();
        SHThreatLabel = new javax.swing.JLabel();
        SHNameLabel = new javax.swing.JLabel();
        SHUrgencyYRadioButton = new javax.swing.JRadioButton();
        SHSaveButton = new javax.swing.JButton();
        SHPowerYRadioButton = new javax.swing.JRadioButton();
        InformationLabel = new javax.swing.JLabel();
        StakeholderListLabel = new javax.swing.JLabel();
        classificationPanel = new javax.swing.JPanel();
        classLayeredPane = new javax.swing.JLayeredPane();
        NonStakeHolderList = new AutoComboBox();
        DormantStakeHolderList = new AutoComboBox();
        DiscretionaryStakeHolderList = new AutoComboBox();
        DominantStakeHolderList = new AutoComboBox();
        DefinitiveStakeHolderList = new AutoComboBox();
        DangerousStakeHolderList = new AutoComboBox();
        DependentStakeHolderList = new AutoComboBox();
        DemandingStakeHolderList = new AutoComboBox();
        vennLabel = new javax.swing.JLabel();
        actionPanel = new javax.swing.JPanel();
        actionLayeredPane = new javax.swing.JLayeredPane();
        Supportive_UndefinedBox = new AutoComboBox();
        Mixed_UndefinedBox = new AutoComboBox();
        NonSupportive_UndefinedBox = new AutoComboBox();
        Marginal_UndefinedBox = new AutoComboBox();
        Supportive_LatentBox = new AutoComboBox();
        Mixed_LatentBox = new AutoComboBox();
        NonSupportive_LatentBox = new AutoComboBox();
        Marginal_LatentBox = new AutoComboBox();
        Supportive_ExpectantBox = new AutoComboBox();
        Mixed_ExpectantBox = new AutoComboBox();
        NonSupportive_ExpectantBox = new AutoComboBox();
        Marginal_ExpectantBox = new AutoComboBox();
        Supportive_DefinitiveBox = new AutoComboBox();
        Mixed_DefinitiveBox = new AutoComboBox();
        NonSupportive_DefinitiveBox = new AutoComboBox();
        Marginal_DefinitiveBox = new AutoComboBox();
        actionLabel = new javax.swing.JLabel();
        influencePanel = new javax.swing.JPanel();
        influenceScrollPane = new javax.swing.JScrollPane();
        influenceMatrixPanel = new javax.swing.JPanel();
        pitcherTable = new javax.swing.JTable();
        contentTable = new javax.swing.JTable();
        catcherTable = new javax.swing.JTable();
        influenceSaveButton = new javax.swing.JButton();
        influenceLabel1 = new javax.swing.JLabel();
        influenceLabel2 = new javax.swing.JLabel();
        influenceLabel3 = new javax.swing.JLabel();
        relationMapParentPanel = new javax.swing.JPanel();
        relationMapScrollPane = new javax.swing.JScrollPane();
        JGraphPanel = new mySTAT.RelationMapPanel();
        managementPlanPanel = new javax.swing.JPanel();
        managementPlanScrollPane = new javax.swing.JScrollPane();
        managementPlanTable = new javax.swing.JTable();
        MenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        openMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        saveMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        securityMenuItem = new javax.swing.JMenuItem();
        exportMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();

        javax.swing.GroupLayout stakeholdersPanelLayout = new javax.swing.GroupLayout(stakeholdersPanel);
        stakeholdersPanel.setLayout(stakeholdersPanelLayout);
        stakeholdersPanelLayout.setHorizontalGroup(
            stakeholdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1164, Short.MAX_VALUE)
        );
        stakeholdersPanelLayout.setVerticalGroup(
            stakeholdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 449, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainTabbedPane.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        mainTabbedPane.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        mainTabbedPane.setPreferredSize(new java.awt.Dimension(898, 727));
        mainTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mainTabbedPaneStateChanged(evt);
            }
        });

        StakeholdersPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        NameLabel.setText("Name");

        WantsScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        WantsTextArea.setColumns(20);
        WantsTextArea.setLineWrap(true);
        WantsTextArea.setRows(5);
        WantsScrollPane.setViewportView(WantsTextArea);

        WantsLabel.setText("Wants");

        PowerbuttonGroup.add(PowerYRadioButton);
        PowerYRadioButton.setText("Yes");

        PowerbuttonGroup.add(PowerNRadioButton);
        PowerNRadioButton.setSelected(true);
        PowerNRadioButton.setText("No");

        LegitimacybuttonGroup.add(LegitimacyYRadioButton);
        LegitimacyYRadioButton.setText("Yes");

        LegitimacybuttonGroup.add(LegitimacyNRadioButton);
        LegitimacyNRadioButton.setSelected(true);
        LegitimacyNRadioButton.setText("No");

        UrgencybuttonGroup.add(UrgencyYRadioButton);
        UrgencyYRadioButton.setText("Yes");

        UrgencybuttonGroup.add(UrgencyNRadioButton);
        UrgencyNRadioButton.setSelected(true);
        UrgencyNRadioButton.setText("No");

        PowerLabel.setText("Power");

        LegitimacyLabel.setText("Legitimacy");

        UrgencyLabel.setText("Urgency");

        NameScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        NameTextArea.setColumns(20);
        NameTextArea.setRows(5);
        NameScrollPane.setViewportView(NameTextArea);

        CooperationbuttonGroup.add(CooperationYRadioButton);
        CooperationYRadioButton.setText("High");

        CooperationbuttonGroup.add(CooperationNRadioButton);
        CooperationNRadioButton.setSelected(true);
        CooperationNRadioButton.setText("Low");

        ThreatbuttonGroup.add(ThreatYRadioButton);
        ThreatYRadioButton.setText("High");

        ThreatbuttonGroup.add(ThreatNRadioButton);
        ThreatNRadioButton.setSelected(true);
        ThreatNRadioButton.setText("Low");

        CooperationLabel.setText("Cooperation");

        ThreatLabel.setText("Threat");

        PotentialLabel.setText("Potential For:");

        StakeholderList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        StakeholderList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                StakeholderListValueChanged(evt);
            }
        });
        StakeholderScrollPane.setViewportView(StakeholderList);

        AddStakeholderButton.setText("Add");
        AddStakeholderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddStakeholderButtonActionPerformed(evt);
            }
        });

        SHPanel.setBackground(new java.awt.Color(255, 204, 0));
        SHPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        SHPanel.setForeground(new java.awt.Color(255, 204, 0));

        SHPotentialLabel.setText("Potential For:");

        SHWantsScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        SHWantsTextArea.setColumns(20);
        SHWantsTextArea.setLineWrap(true);
        SHWantsTextArea.setRows(5);
        SHWantsTextArea.setEnabled(false);
        SHWantsScrollPane.setViewportView(SHWantsTextArea);

        SHCooperationLabel.setText("Cooperation");

        SHRemoveButton.setText("Remove");
        SHRemoveButton.setEnabled(false);
        SHRemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SHRemoveButtonActionPerformed(evt);
            }
        });

        SHLegitimacyNRadioButton.setBackground(new java.awt.Color(255, 204, 0));
        SHLegitimacyButtons.add(SHLegitimacyNRadioButton);
        SHLegitimacyNRadioButton.setText("No");
        SHLegitimacyNRadioButton.setEnabled(false);

        SHUrgencyLabel.setText("Urgency");

        SHThreatNRadioButton.setBackground(new java.awt.Color(255, 204, 0));
        SHThreatButtons.add(SHThreatNRadioButton);
        SHThreatNRadioButton.setText("Low");
        SHThreatNRadioButton.setEnabled(false);

        SHCooperationNRadioButton.setBackground(new java.awt.Color(255, 204, 0));
        SHCooperationButtons.add(SHCooperationNRadioButton);
        SHCooperationNRadioButton.setText("Low");
        SHCooperationNRadioButton.setEnabled(false);

        SHPowerNRadioButton.setBackground(new java.awt.Color(255, 204, 0));
        SHPowerButtons.add(SHPowerNRadioButton);
        SHPowerNRadioButton.setText("No");
        SHPowerNRadioButton.setEnabled(false);

        SHWantsLabel.setText("Wants");

        SHThreatYRadioButton.setBackground(new java.awt.Color(255, 204, 0));
        SHThreatButtons.add(SHThreatYRadioButton);
        SHThreatYRadioButton.setText("High");
        SHThreatYRadioButton.setEnabled(false);

        SHCooperationYRadioButton.setBackground(new java.awt.Color(255, 204, 0));
        SHCooperationButtons.add(SHCooperationYRadioButton);
        SHCooperationYRadioButton.setText("High");
        SHCooperationYRadioButton.setEnabled(false);

        SHEditButton.setText("Edit");
        SHEditButton.setEnabled(false);
        SHEditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SHEditButtonActionPerformed(evt);
            }
        });

        SHPowerLabel.setText("Power");

        SHUrgencyNRadioButton.setBackground(new java.awt.Color(255, 204, 0));
        SHUrgencyButtons.add(SHUrgencyNRadioButton);
        SHUrgencyNRadioButton.setText("No");
        SHUrgencyNRadioButton.setEnabled(false);

        SHNameScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        SHNameTextArea.setColumns(20);
        SHNameTextArea.setRows(5);
        SHNameTextArea.setEnabled(false);
        SHNameScrollPane.setViewportView(SHNameTextArea);

        SHLegitimacyYRadioButton.setBackground(new java.awt.Color(255, 204, 0));
        SHLegitimacyButtons.add(SHLegitimacyYRadioButton);
        SHLegitimacyYRadioButton.setText("Yes");
        SHLegitimacyYRadioButton.setEnabled(false);

        SHLegitimacyLabel.setText("Legitimacy");

        SHThreatLabel.setText("Threat");

        SHNameLabel.setText("Name");

        SHUrgencyYRadioButton.setBackground(new java.awt.Color(255, 204, 0));
        SHUrgencyButtons.add(SHUrgencyYRadioButton);
        SHUrgencyYRadioButton.setText("Yes");
        SHUrgencyYRadioButton.setEnabled(false);

        SHSaveButton.setText("Save");
        SHSaveButton.setEnabled(false);
        SHSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SHSaveButtonActionPerformed(evt);
            }
        });

        SHPowerYRadioButton.setBackground(new java.awt.Color(255, 204, 0));
        SHPowerButtons.add(SHPowerYRadioButton);
        SHPowerYRadioButton.setText("Yes");
        SHPowerYRadioButton.setEnabled(false);

        javax.swing.GroupLayout SHPanelLayout = new javax.swing.GroupLayout(SHPanel);
        SHPanel.setLayout(SHPanelLayout);
        SHPanelLayout.setHorizontalGroup(
            SHPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SHPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SHPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SHPanelLayout.createSequentialGroup()
                        .addGroup(SHPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(SHPanelLayout.createSequentialGroup()
                                .addGroup(SHPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(SHPowerNRadioButton)
                                    .addComponent(SHPowerYRadioButton))
                                .addGap(22, 22, 22)
                                .addGroup(SHPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(SHLegitimacyYRadioButton)
                                    .addComponent(SHLegitimacyNRadioButton)))
                            .addGroup(SHPanelLayout.createSequentialGroup()
                                .addComponent(SHPowerLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(SHLegitimacyLabel)))
                        .addGap(18, 18, 18)
                        .addGroup(SHPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SHUrgencyYRadioButton)
                            .addComponent(SHUrgencyNRadioButton)
                            .addComponent(SHUrgencyLabel))
                        .addGap(18, 18, 18)
                        .addGroup(SHPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(SHPanelLayout.createSequentialGroup()
                                .addComponent(SHCooperationLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(SHThreatLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(SHPanelLayout.createSequentialGroup()
                                .addGroup(SHPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(SHCooperationYRadioButton)
                                    .addComponent(SHCooperationNRadioButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(SHPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(SHThreatNRadioButton)
                                    .addComponent(SHThreatYRadioButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(SHPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(SHRemoveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SHSaveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SHPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(SHPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SHPanelLayout.createSequentialGroup()
                                .addGroup(SHPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(SHPanelLayout.createSequentialGroup()
                                        .addComponent(SHWantsLabel)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SHPanelLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(SHNameLabel)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(SHPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(SHWantsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
                                    .addComponent(SHNameScrollPane)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SHPanelLayout.createSequentialGroup()
                                .addComponent(SHPotentialLabel)
                                .addGap(53, 53, 53)
                                .addComponent(SHEditButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        SHPanelLayout.setVerticalGroup(
            SHPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SHPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SHPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(SHNameScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SHNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(SHPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SHWantsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SHPanelLayout.createSequentialGroup()
                        .addComponent(SHWantsLabel)
                        .addGap(18, 18, 18)))
                .addGroup(SHPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SHPotentialLabel)
                    .addComponent(SHEditButton))
                .addGap(2, 2, 2)
                .addGroup(SHPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SHPanelLayout.createSequentialGroup()
                        .addGroup(SHPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SHPowerLabel)
                            .addComponent(SHLegitimacyLabel)
                            .addComponent(SHUrgencyLabel)
                            .addComponent(SHCooperationLabel)
                            .addComponent(SHThreatLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(SHPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(SHPanelLayout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(SHPowerYRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SHPowerNRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(SHPanelLayout.createSequentialGroup()
                                .addComponent(SHLegitimacyYRadioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(SHLegitimacyNRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(SHPanelLayout.createSequentialGroup()
                                .addComponent(SHUrgencyYRadioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(SHUrgencyNRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(SHPanelLayout.createSequentialGroup()
                                .addGroup(SHPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(SHCooperationYRadioButton)
                                    .addComponent(SHThreatYRadioButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(SHPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(SHCooperationNRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(SHThreatNRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(SHPanelLayout.createSequentialGroup()
                        .addComponent(SHSaveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SHRemoveButton)))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        InformationLabel.setForeground(new java.awt.Color(255, 0, 0));

        StakeholderListLabel.setText("List of Stakeholders");

        javax.swing.GroupLayout StakeholdersPanelLayout = new javax.swing.GroupLayout(StakeholdersPanel);
        StakeholdersPanel.setLayout(StakeholdersPanelLayout);
        StakeholdersPanelLayout.setHorizontalGroup(
            StakeholdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StakeholdersPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(StakeholdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(StakeholdersPanelLayout.createSequentialGroup()
                        .addComponent(InformationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(147, 147, 147)
                        .addComponent(StakeholderListLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(StakeholdersPanelLayout.createSequentialGroup()
                        .addGroup(StakeholdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(StakeholdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(NameLabel)
                                .addComponent(NameScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(WantsLabel)
                                .addComponent(WantsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(StakeholdersPanelLayout.createSequentialGroup()
                                    .addGroup(StakeholdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(StakeholdersPanelLayout.createSequentialGroup()
                                            .addGroup(StakeholdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(PowerYRadioButton)
                                                .addComponent(PowerNRadioButton))
                                            .addGap(18, 18, 18)
                                            .addGroup(StakeholdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(LegitimacyYRadioButton)
                                                .addComponent(LegitimacyNRadioButton)))
                                        .addGroup(StakeholdersPanelLayout.createSequentialGroup()
                                            .addComponent(PowerLabel)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(LegitimacyLabel)))
                                    .addGap(18, 18, 18)
                                    .addGroup(StakeholdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(UrgencyYRadioButton)
                                        .addComponent(UrgencyNRadioButton)
                                        .addComponent(UrgencyLabel))
                                    .addGap(18, 18, 18)
                                    .addGroup(StakeholdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(StakeholdersPanelLayout.createSequentialGroup()
                                            .addGroup(StakeholdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(CooperationYRadioButton)
                                                .addComponent(CooperationNRadioButton))
                                            .addGap(18, 18, 18)
                                            .addGroup(StakeholdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(ThreatYRadioButton)
                                                .addComponent(ThreatNRadioButton)))
                                        .addGroup(StakeholdersPanelLayout.createSequentialGroup()
                                            .addComponent(CooperationLabel)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(ThreatLabel)))
                                    .addGap(24, 24, 24)
                                    .addComponent(AddStakeholderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, StakeholdersPanelLayout.createSequentialGroup()
                                    .addComponent(PotentialLabel)
                                    .addGap(102, 102, 102)))
                            .addComponent(SHPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(57, 57, 57)
                        .addComponent(StakeholderScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(109, 109, 109))
        );
        StakeholdersPanelLayout.setVerticalGroup(
            StakeholdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StakeholdersPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(StakeholdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(InformationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(StakeholderListLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(StakeholdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(StakeholdersPanelLayout.createSequentialGroup()
                        .addComponent(NameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(NameScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(WantsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(WantsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PotentialLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(StakeholdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(StakeholdersPanelLayout.createSequentialGroup()
                                .addGroup(StakeholdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(PowerLabel)
                                    .addComponent(LegitimacyLabel)
                                    .addComponent(UrgencyLabel)
                                    .addComponent(CooperationLabel)
                                    .addComponent(ThreatLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(StakeholdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(StakeholdersPanelLayout.createSequentialGroup()
                                        .addComponent(PowerYRadioButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(PowerNRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(StakeholdersPanelLayout.createSequentialGroup()
                                        .addComponent(LegitimacyYRadioButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(LegitimacyNRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(StakeholdersPanelLayout.createSequentialGroup()
                                        .addComponent(UrgencyYRadioButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(UrgencyNRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(StakeholdersPanelLayout.createSequentialGroup()
                                        .addComponent(CooperationYRadioButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(CooperationNRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(StakeholdersPanelLayout.createSequentialGroup()
                                .addGroup(StakeholdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(AddStakeholderButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ThreatYRadioButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ThreatNRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SHPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(StakeholderScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainTabbedPane.addTab("<html>\n<br>\nStakeholders<br>\n<br>", null, StakeholdersPanel, "");

        classificationPanel.setLayout(new java.awt.GridBagLayout());

        NonStakeHolderList.setMaximumRowCount(10);
        NonStakeHolderList.setAutoscrolls(true);
        classLayeredPane.add(NonStakeHolderList);
        NonStakeHolderList.setBounds(300, 340, 70, 20);

        DormantStakeHolderList.setMaximumRowCount(10);
        classLayeredPane.add(DormantStakeHolderList);
        DormantStakeHolderList.setBounds(60, 60, 70, 20);

        DiscretionaryStakeHolderList.setMaximumRowCount(10);
        classLayeredPane.add(DiscretionaryStakeHolderList);
        DiscretionaryStakeHolderList.setBounds(260, 130, 70, 20);

        DominantStakeHolderList.setMaximumRowCount(10);
        classLayeredPane.add(DominantStakeHolderList);
        DominantStakeHolderList.setBounds(150, 100, 70, 20);

        DefinitiveStakeHolderList.setMaximumRowCount(10);
        classLayeredPane.add(DefinitiveStakeHolderList);
        DefinitiveStakeHolderList.setBounds(130, 180, 70, 20);

        DangerousStakeHolderList.setMaximumRowCount(10);
        classLayeredPane.add(DangerousStakeHolderList);
        DangerousStakeHolderList.setBounds(30, 210, 70, 20);

        DependentStakeHolderList.setMaximumRowCount(10);
        classLayeredPane.add(DependentStakeHolderList);
        DependentStakeHolderList.setBounds(190, 260, 70, 20);

        DemandingStakeHolderList.setMaximumRowCount(10);
        classLayeredPane.add(DemandingStakeHolderList);
        DemandingStakeHolderList.setBounds(80, 300, 70, 20);

        vennLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mySTAT/classification.png"))); // NOI18N
        classLayeredPane.add(vennLabel);
        vennLabel.setBounds(0, 0, 646, 454);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        classificationPanel.add(classLayeredPane, gridBagConstraints);

        mainTabbedPane.addTab("<html>\n<br>\nClassifications<br>\n<br>", classificationPanel);

        actionPanel.setLayout(new java.awt.GridBagLayout());

        actionLayeredPane.setOpaque(true);

        Supportive_UndefinedBox.setMaximumRowCount(10);
        actionLayeredPane.add(Supportive_UndefinedBox);
        Supportive_UndefinedBox.setBounds(190, 180, 60, 20);

        Mixed_UndefinedBox.setMaximumRowCount(10);
        actionLayeredPane.add(Mixed_UndefinedBox);
        Mixed_UndefinedBox.setBounds(190, 210, 60, 20);

        NonSupportive_UndefinedBox.setMaximumRowCount(10);
        actionLayeredPane.add(NonSupportive_UndefinedBox);
        NonSupportive_UndefinedBox.setBounds(190, 240, 60, 20);

        Marginal_UndefinedBox.setMaximumRowCount(10);
        actionLayeredPane.add(Marginal_UndefinedBox);
        Marginal_UndefinedBox.setBounds(190, 270, 60, 20);

        Supportive_LatentBox.setMaximumRowCount(10);
        actionLayeredPane.add(Supportive_LatentBox);
        Supportive_LatentBox.setBounds(270, 180, 60, 20);

        Mixed_LatentBox.setMaximumRowCount(10);
        actionLayeredPane.add(Mixed_LatentBox);
        Mixed_LatentBox.setBounds(270, 210, 60, 20);

        NonSupportive_LatentBox.setMaximumRowCount(10);
        actionLayeredPane.add(NonSupportive_LatentBox);
        NonSupportive_LatentBox.setBounds(270, 240, 60, 20);

        Marginal_LatentBox.setMaximumRowCount(10);
        actionLayeredPane.add(Marginal_LatentBox);
        Marginal_LatentBox.setBounds(270, 270, 60, 20);

        Supportive_ExpectantBox.setMaximumRowCount(10);
        actionLayeredPane.add(Supportive_ExpectantBox);
        Supportive_ExpectantBox.setBounds(350, 180, 60, 20);

        Mixed_ExpectantBox.setMaximumRowCount(10);
        actionLayeredPane.add(Mixed_ExpectantBox);
        Mixed_ExpectantBox.setBounds(350, 210, 60, 20);

        NonSupportive_ExpectantBox.setMaximumRowCount(10);
        actionLayeredPane.add(NonSupportive_ExpectantBox);
        NonSupportive_ExpectantBox.setBounds(350, 240, 60, 20);

        Marginal_ExpectantBox.setMaximumRowCount(10);
        actionLayeredPane.add(Marginal_ExpectantBox);
        Marginal_ExpectantBox.setBounds(350, 270, 60, 20);

        Supportive_DefinitiveBox.setMaximumRowCount(10);
        actionLayeredPane.add(Supportive_DefinitiveBox);
        Supportive_DefinitiveBox.setBounds(430, 180, 60, 20);

        Mixed_DefinitiveBox.setMaximumRowCount(10);
        actionLayeredPane.add(Mixed_DefinitiveBox);
        Mixed_DefinitiveBox.setBounds(430, 210, 60, 20);

        NonSupportive_DefinitiveBox.setMaximumRowCount(10);
        actionLayeredPane.add(NonSupportive_DefinitiveBox);
        NonSupportive_DefinitiveBox.setBounds(430, 240, 60, 20);

        Marginal_DefinitiveBox.setMaximumRowCount(10);
        actionLayeredPane.add(Marginal_DefinitiveBox);
        Marginal_DefinitiveBox.setBounds(430, 270, 60, 20);

        actionLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mySTAT/actionTable.png"))); // NOI18N
        actionLayeredPane.add(actionLabel);
        actionLabel.setBounds(30, 40, 670, 330);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        actionPanel.add(actionLayeredPane, gridBagConstraints);

        mainTabbedPane.addTab("<html>\n<br>\nActions<br>\n<br>", actionPanel);

        influencePanel.setPreferredSize(new java.awt.Dimension(800, 497));

        influenceScrollPane.setAutoscrolls(true);
        influenceScrollPane.setPreferredSize(new java.awt.Dimension(200, 100));
        influenceScrollPane.getVerticalScrollBar().setUnitIncrement(16);
        influenceScrollPane.getHorizontalScrollBar().setUnitIncrement(16);

        String headerRelationshipArray[][];
        String[] headerString = new String[Stakeholders.size()];
        for (int i = 0; i < Stakeholders.size(); i++)
        {
            headerString[i] = Stakeholders.get(i).getName();
        }

        //Display already created stakeholder list items
        if (!Stakeholders.isEmpty()){
            headerRelationshipArray = new String[Stakeholders.size()][Stakeholders.size()];
            for (int r = 0; r < Stakeholders.size(); r++)
            {
                headerRelationshipArray[r][0] = headerString[r];}
        }
        //create fresh table for new projects (no stakeholders yet)
        else {
            headerRelationshipArray = new String [2][1];
            for (int i = 0; i < 2; i++)
            {
                headerRelationshipArray[i][0] = "nada";
            }
        }
        pitcherTable.setModel(new javax.swing.table.DefaultTableModel(
            headerRelationshipArray,
            new String [] {"Stakeholders"}));
    pitcherTable.setEnabled(false);
    pitcherTable.setFillsViewportHeight(true);

    //Array of strings to hold column names
    String[] contentString = new String[Stakeholders.size()];
    for (int i = 0; i < Stakeholders.size(); i++)
    {
        contentString[i] = Stakeholders.get(i).getName();
    }
    String contentRelationshipArray[][];
    //Display already created stakeholder list items
    if (!Stakeholders.isEmpty()){
        contentRelationshipArray = new String[Stakeholders.size()][Stakeholders.size()];
        for (int r = 0; r < Stakeholders.size(); r++)
        {
            for (int c = 0; c < Stakeholders.size(); c++)
            {
                if (r == c)
                { contentRelationshipArray[r][c] = "N/A";}
                else
                {
                    if (!Stakeholders.get(c).getInfluences().isEmpty())
                    {
                        int tempMagnitude = Stakeholders.get(c).getInfluenceNumber(r).getMagnitude();
                        contentRelationshipArray[r][c] = Integer.toString(tempMagnitude);
                    }
                    else
                    { contentRelationshipArray[r][c] = "select";}
                }//end of else
            }//end of column for loop
        }//end of row for loop
    }//end of if arraylist not empty
    //create fresh table for new projects (no stakeholders yet)
    else {
        contentRelationshipArray = new String[2][2];
        for (int i = 0; i < 2; i++){
            for (int e = 0; e < 2; e++){
                contentRelationshipArray[i][e] = "0";
            }
        }
    }
    contentTable.setModel(new javax.swing.table.DefaultTableModel(
        contentRelationshipArray,
        contentString));
contentTable.setToolTipText("Click a cell to change the relationship strength");
contentTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
contentTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
contentTable.setFillsViewportHeight(true);
contentTable.setRowSelectionAllowed(false);
contentTable.addFocusListener(new java.awt.event.FocusAdapter() {
    public void focusGained(java.awt.event.FocusEvent evt) {
        contentTableFocusGained(evt);
    }
    });

    //fill in the contents
    String catcherRelationshipArray[][];
    String[] catcherString = new String[Stakeholders.size()];
    for (int i = 0; i < Stakeholders.size(); i++)
    {
        catcherString[i] = Stakeholders.get(i).getName();
    }
    //Display already created stakeholder list items
    if (!Stakeholders.isEmpty())
    {
        catcherRelationshipArray = new String[Stakeholders.size()][Stakeholders.size()];
        for (int c = 0; c <= Stakeholders.size(); c++)
        {
            catcherRelationshipArray[0][c] = Stakeholders.get(c).getName();
        }
    }
    //create fresh table for new projects (no stakeholders yet)
    else {
        catcherRelationshipArray = new String [1][2];
        for (int i = 0; i < 2; i++){
            catcherRelationshipArray[0][i] = "Empty";
        }
    }
    catcherTable.setModel(new javax.swing.table.DefaultTableModel(
        catcherRelationshipArray,
        catcherString));
catcherTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
catcherTable.setEnabled(false);

influenceSaveButton.setText("<html><center>Save<br>Updates</center></html>");
influenceSaveButton.addMouseListener(new java.awt.event.MouseAdapter() {
    public void mouseClicked(java.awt.event.MouseEvent evt) {
        influenceSaveButtonMouseClicked(evt);
    }
    });

    javax.swing.GroupLayout influenceMatrixPanelLayout = new javax.swing.GroupLayout(influenceMatrixPanel);
    influenceMatrixPanel.setLayout(influenceMatrixPanelLayout);
    influenceMatrixPanelLayout.setHorizontalGroup(
        influenceMatrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(influenceMatrixPanelLayout.createSequentialGroup()
            .addGap(33, 33, 33)
            .addGroup(influenceMatrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(pitcherTable, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(influenceMatrixPanelLayout.createSequentialGroup()
                    .addGap(25, 25, 25)
                    .addComponent(influenceSaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(18, 18, 18)
            .addGroup(influenceMatrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(contentTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(catcherTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGap(20, 20, 20))
    );
    influenceMatrixPanelLayout.setVerticalGroup(
        influenceMatrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(influenceMatrixPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(influenceMatrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(catcherTable, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(influenceSaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(influenceMatrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(pitcherTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(contentTable, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE))
            .addGap(10, 10, 10))
    );

    contentTable.getAccessibleContext().setAccessibleName("");

    influenceScrollPane.setViewportView(influenceMatrixPanel);

    javax.swing.GroupLayout influencePanelLayout = new javax.swing.GroupLayout(influencePanel);
    influencePanel.setLayout(influencePanelLayout);
    influencePanelLayout.setHorizontalGroup(
        influencePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(influencePanelLayout.createSequentialGroup()
            .addComponent(influenceScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
            .addGap(35, 35, 35))
        .addGroup(influencePanelLayout.createSequentialGroup()
            .addGap(191, 191, 191)
            .addComponent(influenceLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
            .addGap(12, 12, 12)
            .addComponent(influenceLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
            .addGap(8, 8, 8)
            .addComponent(influenceLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
            .addGap(308, 308, 308))
    );
    influencePanelLayout.setVerticalGroup(
        influencePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(influencePanelLayout.createSequentialGroup()
            .addGroup(influencePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addComponent(influenceLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                .addComponent(influenceLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(influenceLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(influenceScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
            .addGap(33, 33, 33))
    );

    mainTabbedPane.addTab("<html>\n<br>\nInfluences<br>\n<br>", null, influencePanel, "Click here to modify the stakeholder relationships");

    relationMapScrollPane.setAutoscrolls(true);
    relationMapScrollPane.getVerticalScrollBar().setUnitIncrement(16);
    relationMapScrollPane.getHorizontalScrollBar().setUnitIncrement(16);

    JGraphPanel.setAutoscrolls(true);
    relationMapScrollPane.setViewportView(JGraphPanel);

    javax.swing.GroupLayout relationMapParentPanelLayout = new javax.swing.GroupLayout(relationMapParentPanel);
    relationMapParentPanel.setLayout(relationMapParentPanelLayout);
    relationMapParentPanelLayout.setHorizontalGroup(
        relationMapParentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(relationMapParentPanelLayout.createSequentialGroup()
            .addComponent(relationMapScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 785, Short.MAX_VALUE)
            .addGap(5, 5, 5))
    );
    relationMapParentPanelLayout.setVerticalGroup(
        relationMapParentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(relationMapParentPanelLayout.createSequentialGroup()
            .addGap(5, 5, 5)
            .addComponent(relationMapScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
            .addGap(20, 20, 20))
    );

    mainTabbedPane.addTab("<html> <br> Relation Map<br><br>", relationMapParentPanel);

    managementPlanScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 0)));
    managementPlanScrollPane.setPreferredSize(new java.awt.Dimension(200, 100));

    String tempArray[][];
    if (!Stakeholders.isEmpty()){
        tempArray = new String[Stakeholders.size()][10];
        for (int i = 0; i < Stakeholders.size(); i++){
            tempArray[i][0] = Stakeholders.get(i).getName();
            tempArray[i][1] = Stakeholders.get(i).getWants();
            tempArray[i][2] = Stakeholders.get(i).getClassification();
            tempArray[i][3] = Stakeholders.get(i).getAttitude();
            tempArray[i][4] = String.format("%.3f", Stakeholders.get(i).getInfluence());
            tempArray[i][5] = Stakeholders.get(i).getStrategy();
            tempArray[i][6] = Stakeholders.get(i).getEngagement();
            tempArray[i][7] = Stakeholders.get(i).getLastEngaged();
            tempArray[i][8] = Stakeholders.get(i).getResponsible();
            tempArray[i][9] = Stakeholders.get(i).getNotes();
        }
    }
    else {
        tempArray = new String [2][10];
        for (int i = 0; i < 2; i++){
            for (int e = 0; e < 10; e++){
                tempArray[i][e] = "nada";
            }
        }
    }
    managementPlanTable.setModel(new javax.swing.table.DefaultTableModel(
        tempArray,
        new String [] {
            "Name", "Wants", "Classification", "Attitude", "Influence", "Strategy",
            "<html>Method of<br>Engagement", "<html>Last<br>Engaged",
            "<html>Responsible<br>Party", "Notes"
        }
    ){
        boolean[] canEdit = new boolean [] {
            false, false, false, false, false, false, true, true, true, true
        };

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    managementPlanTable.getTableHeader().setPreferredSize(new Dimension(managementPlanTable.getColumnModel().getTotalColumnWidth(), 32));
    managementPlanTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
    managementPlanTable.setCellSelectionEnabled(true);
    managementPlanTable.setFillsViewportHeight(true);
    managementPlanTable.setRowHeight(50);
    managementPlanTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
        public void propertyChange(java.beans.PropertyChangeEvent evt) {
            managementPlanTablePropertyChange(evt);
        }
    });
    managementPlanScrollPane.setViewportView(managementPlanTable);
    managementPlanTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
    //allow table word wrap
    for (int i = 0; i < 10; i++)
    { managementPlanTable.getColumnModel().getColumn(i).setCellRenderer(new TableCellLongTextRenderer ()); }

    javax.swing.GroupLayout managementPlanPanelLayout = new javax.swing.GroupLayout(managementPlanPanel);
    managementPlanPanel.setLayout(managementPlanPanelLayout);
    managementPlanPanelLayout.setHorizontalGroup(
        managementPlanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(managementPlanPanelLayout.createSequentialGroup()
            .addComponent(managementPlanScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 770, Short.MAX_VALUE)
            .addGap(20, 20, 20))
    );
    managementPlanPanelLayout.setVerticalGroup(
        managementPlanPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(managementPlanPanelLayout.createSequentialGroup()
            .addComponent(managementPlanScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
            .addGap(20, 20, 20))
    );

    mainTabbedPane.addTab("<html>\n<br>\nManagement Plan<br>\n<br>", null, managementPlanPanel, "Click here to view the management plan");

    MenuBar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
    MenuBar.setName(""); // NOI18N

    fileMenu.setText("File");
    fileMenu.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

    newMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
    newMenuItem.setText("New");
    newMenuItem.setToolTipText("Create a new project file");
    newMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            newMenuItemActionPerformed(evt);
        }
    });
    fileMenu.add(newMenuItem);
    fileMenu.add(jSeparator1);

    openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
    openMenuItem.setText("Open");
    openMenuItem.setToolTipText("Open a STAT file");
    openMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            openMenuItemActionPerformed(evt);
        }
    });
    fileMenu.add(openMenuItem);
    fileMenu.add(jSeparator2);

    saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
    saveMenuItem.setText("Save");
    saveMenuItem.setToolTipText("Save the project");
    saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            saveMenuItemActionPerformed(evt);
        }
    });
    fileMenu.add(saveMenuItem);
    fileMenu.add(jSeparator3);

    securityMenuItem.setText("Security");
    securityMenuItem.setToolTipText("Encrypt the Save File");
    securityMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            securityMenuItemActionPerformed(evt);
        }
    });
    fileMenu.add(securityMenuItem);

    exportMenuItem.setForeground(new java.awt.Color(153, 153, 153));
    exportMenuItem.setText("Export");
    exportMenuItem.setToolTipText("Export the Management Plan");
    fileMenu.add(exportMenuItem);
    fileMenu.add(jSeparator4);

    exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
    exitMenuItem.setText("Exit");
    exitMenuItem.setToolTipText("Exit STAT");
    exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            exitMenuItemActionPerformed(evt);
        }
    });
    fileMenu.add(exitMenuItem);

    MenuBar.add(fileMenu);

    editMenu.setForeground(new java.awt.Color(153, 153, 153));
    editMenu.setText("Edit");
    editMenu.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
    MenuBar.add(editMenu);

    setJMenuBar(MenuBar);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(mainTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(mainTabbedPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 493, Short.MAX_VALUE)
    );

    setSize(new java.awt.Dimension(914, 558));
    setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        // TODO add your handling code here:
        if (saveMenuItemIsUsed == false)
        { int n = JOptionPane.showConfirmDialog(null,"Are you sure that you want to exit without saving\nAll unsaved work will be lost", "Warning!", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if(n == JOptionPane.YES_OPTION)
             System.exit(0);  
        }
        else
            System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

   
    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // TODO add your handling code here:
        int returnVal = openFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = openFileChooser.getSelectedFile();
            ProjectStore project = ProjectStore.getInstance();
            this.Stakeholders = project.openProjectFile(file.getPath());
            
            updateStakehodlerList();
            testFrame.updateModel(Stakeholders);
            //} else {
            //   System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void AddStakeholderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddStakeholderButtonActionPerformed
        // TODO add your handling code here:
        boolean power = false, legitimacy = false, urgency = false;
        boolean cooperation = false, threat = false;
        //examine boolean choices
        if (PowerbuttonGroup.getSelection().equals(PowerYRadioButton.getModel())) {
            power = true;
        }
        if (PowerbuttonGroup.getSelection().equals(PowerNRadioButton.getModel())) {
            power = false;
        }
        if (LegitimacybuttonGroup.getSelection().equals(LegitimacyYRadioButton.getModel())) {
            legitimacy = true;
        }
        if (LegitimacybuttonGroup.getSelection().equals(LegitimacyNRadioButton.getModel())) {
            legitimacy = false;
        }
        if (UrgencybuttonGroup.getSelection().equals(UrgencyYRadioButton.getModel())) {
            urgency = true;
        }
        if (UrgencybuttonGroup.getSelection().equals(UrgencyNRadioButton.getModel())) {
            urgency = false;
        }
        if (CooperationbuttonGroup.getSelection().equals(CooperationYRadioButton.getModel())) {
            cooperation = true;
        }
        if (CooperationbuttonGroup.getSelection().equals(CooperationNRadioButton.getModel())) {
            cooperation = false;
        }
        if (ThreatbuttonGroup.getSelection().equals(ThreatYRadioButton.getModel())) {
            threat = true;
        }
        if (ThreatbuttonGroup.getSelection().equals(ThreatNRadioButton.getModel())) {
            threat = false;
        }
        //create new stakeholder section below///////////////
        boolean noDuplicates = true;
        for (int i = 0; i < Stakeholders.size(); i++)
        {
            if (NameTextArea.getText().equals(Stakeholders.get(i).getName()))
                    { noDuplicates = false; }
        }
        
        // check for valid values
        if(NameTextArea.getText().length() > 60) 
            updateStakeholderError("Stakeholder Name must be 60 characters or less!");
        else if(WantsTextArea.getText().length() > 1024)
            updateStakeholderError("Stakeholder Wants must be 1024 characters or less!");
        else if (noDuplicates == false) {
                String errMsg = new String("Stakeholder not added. " + NameTextArea.getText( )+ " already exists.");
                InformationLabel.setText("Stakeholder name must be unique!");
                updateStakeholderError(errMsg);
            }
        else if (NameTextArea.getText().isEmpty()) {
                InformationLabel.setText("Stakeholder not added. Please enter a stakeholder name.");
                updateStakeholderError("Stakeholder Name must not be empty.");
            }
        else {
        
            Stakeholder temp = new Stakeholder(NameTextArea.getText(), WantsTextArea.getText(), power, legitimacy, urgency, cooperation, threat);
            
            //add new stakeholder to arraylist
            if (WantsTextArea.getText().isEmpty()) {
                temp.setWants(" ");
            }
            Stakeholders.add(temp);
            InformationLabel.setText("Stakeholder " + temp.getName() + " added");
            //add relationship to each stakeholder
            for (Stakeholder member : Stakeholders) {
                int difference = Stakeholders.size() - member.getInfluences().size();
                if (difference > 0) {
                    for (int i = member.getInfluences().size(); i < Stakeholders.size(); i++) {
                        member.addRelationship(Stakeholders.get(i).getName(), 0);
                    }
                }
            }

            updateStakehodlerList();

            //clear all fields
            NameTextArea.setText("");
            WantsTextArea.setText("");
            PowerNRadioButton.setSelected(true);
            LegitimacyNRadioButton.setSelected(true);
            UrgencyNRadioButton.setSelected(true);
            CooperationNRadioButton.setSelected(true);
            ThreatNRadioButton.setSelected(true);
            //disable stakeholder editing buttons until one is chosen
            SHSaveButton.setEnabled(false);
            SHEditButton.setEnabled(false);
            SHRemoveButton.setEnabled(false);
        }
    }//GEN-LAST:event_AddStakeholderButtonActionPerformed

    //function to display Stakeholder data in orange window
    private void StakeholderListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_StakeholderListValueChanged
        // TODO add your handling code here:
        Stakeholder tempSH = new Stakeholder();
        String tempName = (String) StakeholderList.getSelectedValue();
        for (int i = 0; i < Stakeholders.size(); i++){
            if (Stakeholders.get(i).getName().equals(tempName) ){
                tempSH = Stakeholders.get(i);
                break;
            }
        }                
        //set name
        SHNameTextArea.setText(tempSH.getName());
        //set wants
        SHWantsTextArea.setText(tempSH.getWants());
        //set booleans
        if (tempSH.getPower() == true) {
            SHPowerYRadioButton.setSelected(true);
            SHPowerNRadioButton.setSelected(false);
        } else {
            SHPowerYRadioButton.setSelected(false);
            SHPowerNRadioButton.setSelected(true);
        }
        if (tempSH.getLegitimacy() == true) {
            SHLegitimacyYRadioButton.setSelected(true);
            SHLegitimacyNRadioButton.setSelected(false);
        } else {
            SHLegitimacyYRadioButton.setSelected(false);
            SHLegitimacyNRadioButton.setSelected(true);
        }
        if (tempSH.getUrgency() == true) {
            SHUrgencyYRadioButton.setSelected(true);
            SHUrgencyNRadioButton.setSelected(false);
        } else {
            SHUrgencyYRadioButton.setSelected(false);
            SHUrgencyNRadioButton.setSelected(true);
        }
        if (tempSH.getCooperation() == true) {
            SHCooperationYRadioButton.setSelected(true);
            SHCooperationNRadioButton.setSelected(false);
        } else {
            SHCooperationYRadioButton.setSelected(false);
            SHCooperationNRadioButton.setSelected(true);
        }
        if (tempSH.getThreat() == true) {
            SHThreatYRadioButton.setSelected(true);
            SHThreatNRadioButton.setSelected(false);
        } else {
            SHThreatYRadioButton.setSelected(false);
            SHThreatNRadioButton.setSelected(true);
        }

        //set all areas to non-editable
        SHNameTextArea.setEnabled(false);
        SHWantsTextArea.setEnabled(false);
        SHPowerYRadioButton.setEnabled(false);
        SHPowerNRadioButton.setEnabled(false);
        SHLegitimacyYRadioButton.setEnabled(false);
        SHLegitimacyNRadioButton.setEnabled(false);
        SHUrgencyYRadioButton.setEnabled(false);
        SHUrgencyNRadioButton.setEnabled(false);
        SHCooperationYRadioButton.setEnabled(false);
        SHCooperationNRadioButton.setEnabled(false);
        SHThreatYRadioButton.setEnabled(false);
        SHThreatNRadioButton.setEnabled(false);
        SHSaveButton.setEnabled(false);
        SHEditButton.setEnabled(true);
        SHRemoveButton.setEnabled(true);

    }//GEN-LAST:event_StakeholderListValueChanged

    private void updateStakeholderError(String msg){
        JOptionPane.showMessageDialog(null,
                        msg,
                        "Error updating Stakeholder",
                        JOptionPane.ERROR_MESSAGE);
    }
    
    private void updateStakehodlerList()
    {
        DefaultListModel model1 = new DefaultListModel();
        for (int i = 0; i < Stakeholders.size(); i++) {
            Stakeholder obj=Stakeholders.get(i);
            model1.addElement(obj.getName());
        }
        StakeholderList.setModel(model1);
    }
    //remove selected stakeholder
    private void SHRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SHRemoveButtonActionPerformed
        // TODO add your handling code here:
        //remove stakeholder from arraylist
        String tempName = (String) StakeholderList.getSelectedValue();
        //remove stakeholder from arrayList Stakeholders
        for (int i = 0; i < Stakeholders.size(); i++){
            if (Stakeholders.get(i).getName().equals(tempName) ){
                //remove relationship from each member
                for (Stakeholder member: Stakeholders) 
                {
                    member.removeRelationship(i);
                }
                //remove from arrayList
                Stakeholders.remove(i);
                break;
            }
        }
        //remove stakeholder from jlist
        DefaultListModel model = (DefaultListModel) StakeholderList.getModel();
        int selectedIndex = StakeholderList.getSelectedIndex();
        if (selectedIndex != -1) {
            model.remove(selectedIndex);
            StakeholderList.setModel(model);
            InformationLabel.setText("Stakeholder " + tempName + " removed");
            }
        //disable stakeholder editing buttons until one is chosen
        SHSaveButton.setEnabled(false);
        SHEditButton.setEnabled(false);
        SHRemoveButton.setEnabled(false);
    }//GEN-LAST:event_SHRemoveButtonActionPerformed

    //enable orange stakeholder area for editing
    private void SHEditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SHEditButtonActionPerformed
        // TODO add your handling code here:
        SHNameTextArea.setEnabled(true);
        SHWantsTextArea.setEnabled(true);
        SHPowerYRadioButton.setEnabled(true);
        SHPowerNRadioButton.setEnabled(true);
        SHLegitimacyYRadioButton.setEnabled(true);
        SHLegitimacyNRadioButton.setEnabled(true);
        SHUrgencyYRadioButton.setEnabled(true);
        SHUrgencyNRadioButton.setEnabled(true);
        SHCooperationYRadioButton.setEnabled(true);
        SHCooperationNRadioButton.setEnabled(true);
        SHThreatYRadioButton.setEnabled(true);
        SHThreatNRadioButton.setEnabled(true);
        SHSaveButton.setEnabled(true);
        
    }//GEN-LAST:event_SHEditButtonActionPerformed

    //save changes to stakeholder
    private void SHSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SHSaveButtonActionPerformed
        // TODO add your handling code here:
        String name, wants;
        boolean power, legitimacy, urgency, cooperation, threat;
        String findName = (String) StakeholderList.getSelectedValue();
        //get edited fields
        name = SHNameTextArea.getText();
        wants = SHWantsTextArea.getText();
        power = SHPowerYRadioButton.isSelected();
        legitimacy = SHLegitimacyYRadioButton.isSelected();
        urgency = SHUrgencyYRadioButton.isSelected();
        cooperation = SHCooperationYRadioButton.isSelected();
        threat = SHThreatYRadioButton.isSelected();
        
        // check for valid values
        if(name.length() > 60) 
            updateStakeholderError("Stakeholder Name must be 60 characters or less!");
        else if(wants.length() > 1024)
            updateStakeholderError("Stakeholder Wants must be 1024 characters or less!");
        else {
        
                //find the stakeholder in arraylist and edit
            for (int i = 0; i < Stakeholders.size(); i++) {
                if (Stakeholders.get(i).getName().equals(findName)) {
                    Stakeholders.get(i).edit(name, wants, power, legitimacy, urgency, cooperation, threat);
                    break;
                }
            }
            //find the stakeholder name in the jlist and change
            DefaultListModel model = (DefaultListModel) StakeholderList.getModel();
            int selectedIndex = StakeholderList.getSelectedIndex();
            if (selectedIndex != -1) {
                model.setElementAt(name, selectedIndex);
                StakeholderList.setModel(model);
                InformationLabel.setText("Stakeholder " + name + " updated");
            }
        }
        
    }//GEN-LAST:event_SHSaveButtonActionPerformed
    
    //update the influenceTable
    @SuppressWarnings("empty-statement")
    private void influenceTableUpdate() {
        //update the column row headers
        String headerRelationshipArray[][];
        String columnRelationshipArray[][];
        String stakeholderString[];
        Relationship buddy;
        //String searchSH;
        if (!Stakeholders.isEmpty())
        {
            stakeholderString = new String[Stakeholders.size()];
            headerRelationshipArray = new String[Stakeholders.size()][1];
            columnRelationshipArray = new String[1][Stakeholders.size()];
            for (int i = 0; i < Stakeholders.size(); i++)
            {
                 stakeholderString[i] = Stakeholders.get(i).getName();
                 headerRelationshipArray[i][0] = stakeholderString[i];
                 columnRelationshipArray[0][i] = stakeholderString[i];
            }
        }
        else
        {
                stakeholderString = new String [] {"empty", "empty"};
                headerRelationshipArray = new String [2][1];
                columnRelationshipArray = new String [1][2];
                for (int i = 0; i < 2; i++)
                {
                    headerRelationshipArray[i][0] = "Empty";
                    columnRelationshipArray[0][i] = "Empty";
                }
        }
        //Display already created stakeholder list items
        pitcherTable.setModel(new javax.swing.table.DefaultTableModel(
        headerRelationshipArray,
        new String [] {"Stakeholders"}));
        catcherTable.setModel(new javax.swing.table.DefaultTableModel(
        columnRelationshipArray,
        stakeholderString));
        
        //update the table contents
        //Array of strings to hold column names
        String[] contentString = new String[Stakeholders.size()];
           for (int i = 0; i < Stakeholders.size(); i++)
           {
                contentString[i] = Stakeholders.get(i).getName();
           }
        String contentRelationshipArray[][];
        //Display already created stakeholder list items
        if (!Stakeholders.isEmpty()){
            contentRelationshipArray = new String[Stakeholders.size()][Stakeholders.size()];
            //ensure each stakeholder has the matching number of influences
            //add default relationship to each stakeholder in arrayList recently added
            for (Stakeholder member: Stakeholders){
                int difference = Stakeholders.size() - member.getInfluences().size();
                if (difference > 0)
                {
                    for (int i = member.getInfluences().size(); i < Stakeholders.size(); i++)
                    {
                        member.addRelationship(Stakeholders.get(i).getName(), 0);
                    }
                }
            }
            for (int r = 0; r < Stakeholders.size(); r++)
                {
                    //get row stakeholder's list of relationships
                    ArrayList <Relationship> tempRelationships = new ArrayList<>();
                    for(Relationship partner: Stakeholders.get(r).getInfluences()){
                        buddy = new Relationship(partner);
                        tempRelationships.add(buddy);}
                    //travers list of relationships for each row stakeholder
                    for (int c = 0; c < Stakeholders.size(); c++)
                    {
                        if (r == c) //for row stakeholder matches column stakeholder, default to zero
                        { 
                            contentRelationshipArray[r][c] = "0";
                        }
                        //if relationship is with stakeholders other than itself
                        //else
                        //{
                            //search for a relationship with column stakeholder
                            //searchSH = Stakeholders.get(c).getName();
                            //if stakeholder(r)has a list of relationships, search if (c) is one of them
                        else if (!(Stakeholders.get(r).getInfluences().isEmpty()))
                            {
                                //search stakeholder(r)'s arrayList of relationships
                                //for (int i = 0; i < tempRelationships.size(); i++)
                                //{
                                    //if (tempRelationships.get(i).getId().equals(searchSH))
                                    //{
                                        //int tempValue = tempRelationships.get(i).getMagnitude();
                                        int tempValue = tempRelationships.get(c).getMagnitude();
                                        contentRelationshipArray[r][c] = magnitudeString(tempValue);
                                    //}
                                    //if stakeholder(r) does not have a relationship with stakeholder(c)
                                    //else
                                        //contentRelationshipArray[r][c] = "0";
                                //}//end of relationship search loop
                            }//end of if relationships not empty boolean if statement
                            //if stakeholder(r) has no relationships, write zero
                            else
                                contentRelationshipArray[r][c] = "0";
                        //}//end of else statement row stakeholder is not same as column stakeholder
                    }//end of column loop
                }//end of row loop
            }//end of if statement
        //create fresh table for new projects (no stakeholders yet)
        else {
            contentRelationshipArray = new String[2][2];
            for (int i = 0; i < 2; i++){
                for (int e = 0; e < 2; e++)
                {
                    contentRelationshipArray[i][e] = "0";
                }
               }
            }
        //build table
        contentTable.setModel(new javax.swing.table.DefaultTableModel(
            contentRelationshipArray,
            contentString));
        //adjust contenttable and catchertable columns to same size - if there are more than 10 stakeholders
        if (Stakeholders.size() > 10)
        {
            TableColumnAdjuster headers = new TableColumnAdjuster(catcherTable);
            headers.adjustColumns();
            TableColumnAdjuster contents = new TableColumnAdjuster(contentTable);
            contents.copyColumns(catcherTable);
        }
        //add drop downs to the table
            for (int c = 0; c < Stakeholders.size(); c++)
            {
                TableColumn influenceColumn = contentTable.getColumnModel().getColumn(c);
                TableColumn influencedSHs = catcherTable.getColumnModel().getColumn(c);
                JComboBox magnitude = new JComboBox();
                magnitude.addItem("0");
                magnitude.addItem("Low");
                magnitude.addItem("Med");
                magnitude.addItem("High");
                magnitude.setSelectedIndex(0);
                influenceColumn.setCellEditor(new DefaultCellEditor(magnitude));
                //change cells of same row and col to black
                influenceColumn.setCellRenderer(new CustomRenderer());
                //center catcher Table
                influencedSHs.setCellRenderer(new HeaderRenderer());

            }
        //}
        }//end of influenceTableUpdate
    //magnitude int converter
    public int magnitudeNumber(String strength){
        int convertedStrength;
        if (strength.equals("High")){convertedStrength = Relationship.HIGH;}
        else if (strength.equals("Med")){convertedStrength = Relationship.MEDIUM;}
        else if (strength.equals("Low")){convertedStrength = Relationship.LOW;}
        else convertedStrength = 0;
        return convertedStrength;
    }
    //magnitude String converter
    public String magnitudeString(int strength){
        String convertedStrength;
        if (strength == Relationship.HIGH){convertedStrength = "High";}
        else if (strength == Relationship.MEDIUM){convertedStrength = "Med";}
        else if (strength == Relationship.LOW){convertedStrength = "Low";}
        else convertedStrength = "0";
        return convertedStrength;
    }
    //cell change action listener event
    private void relationshipUpdate(){
        if (!Stakeholders.isEmpty())
        {
            String magnitude;
            Relationship buddy;
            for (int r = 0; r < Stakeholders.size(); r++)//traverse rows
            {
                //row = contentTable.getSelectedRow();//get row number
                ArrayList <Relationship> tempInfluences = new ArrayList<>();
                //for(Relationship partner: Stakeholders.get(row).getInfluences()){
                //    buddy = new Relationship(partner);
                //    tempInfluences.add(buddy);}
                //tempInfluences.addAll(Stakeholders.get(row).getInfluences());//get Arraylist of relationships from stakeholder at row header
                for (int c = 0; c < Stakeholders.size(); c++)//traverse columns
                {
                    //column = contentTable.getSelectedColumn();//get column number
                    if (r == c) //can't let stakeholders be partners with themselves now can we? They might go blind
                    {magnitude = "0";}
                    else
                    {magnitude = (String) contentTable.getValueAt(r, c);}//read value from influence table
                    //add code to see if stakeholder relationship already exists in arraylist of relationships
                    tempInfluences.add(new Relationship(Stakeholders.get(c).getName(), magnitudeNumber(magnitude)));//add relationship to stakeholders Arraylist of relationships
                }//end of col loop
                Stakeholders.get(r).setInfluences(tempInfluences);//push the updated arraylist of relationships to stakeholder at row header
            }//end of row loop
        }//end of if Stakeholders is not empty statement
        //if Stakeholders is empty, do nothing
        else {}
    }
    //update the managementPlan contents
    private void managementPlanUpdate() {
        // TODO add your handling code here:
        //create an array of arrays to hold all values in chart form
        String tempArray[][];
        if (!Stakeholders.isEmpty()){
            tempArray = new String[Stakeholders.size()][10];
            for (int i = 0; i < Stakeholders.size(); i++){
                tempArray[i][0] = Stakeholders.get(i).getName();
                tempArray[i][1] = Stakeholders.get(i).getWants();
                tempArray[i][2] = Stakeholders.get(i).getClassification();
                tempArray[i][3] = Stakeholders.get(i).getAttitude();
                tempArray[i][4] = String.format("%.3f", Stakeholders.get(i).getInfluence());
                tempArray[i][5] = Stakeholders.get(i).getStrategy();
                tempArray[i][6] = Stakeholders.get(i).getEngagement();
                tempArray[i][7] = Stakeholders.get(i).getLastEngaged();
                tempArray[i][8] = Stakeholders.get(i).getResponsible();
                tempArray[i][9] = Stakeholders.get(i).getNotes();
            }
        }
        else {
            tempArray = new String [2][10];
            for (int i = 0; i < 2; i++){
                for (int e = 0; e < 10; e++){
                tempArray[i][e] = "nada "+e;
                }
               }
            }
        //set the table model
        managementPlanTable.setModel(new javax.swing.table.DefaultTableModel(
        tempArray,
        new String [] {
        "Name", "Wants", "Classification", "Attitude", "Influence", "Strategy",
        "<html>Method of<br>Engagement", "<html>Last<br>Engaged",
        "<html>Responsible<br>Party", "Notes"
        }
        ){
            boolean[] canEdit = new boolean [] {
            false, false, false, false, false, false, true, true, true, true};
            public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];}
        });
        //add a listener to save changes in editable columns
        managementPlanTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
        public void propertyChange(java.beans.PropertyChangeEvent evt) {
        managementPlanTablePropertyChange(evt);}});
        //set table header height
        managementPlanTable.getTableHeader().setPreferredSize(new Dimension(managementPlanTable.getColumnModel().getTotalColumnWidth(), 32));
        //allow table word wrap
        for (int i = 0; i < 10; i++)
        {
            managementPlanTable.getColumnModel().getColumn(i).setCellRenderer(new TableCellLongTextRenderer ());
        }
        //copy back the original order of the stakeholders if sorting was performed
        Stakeholders.clear();
        for(Stakeholder s : OriginalStakeholders)
        { Stakeholders.add(s); }
    }
    //called when the managment plan tab is clicked
    private void viewManagementPlan() {
        //save original order of Stakeholders
        OriginalStakeholders.clear();
        for(Stakeholder s : Stakeholders)
        { OriginalStakeholders.add(s); }
        //sort Stakeholders by Influence value
        Collections.sort(Stakeholders, new Comparator<Stakeholder>(){
            public int compare(Stakeholder s1, Stakeholder s2) {
            return Double.compare(s2.getInfluence(), s1.getInfluence());}});
        managementPlanUpdate();
        //make table headers clickable
        if (mouseListenerExists == false)
        {
            managementPlanTable.getTableHeader().addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
            ManagementPlanColumnMouseClicked(evt);}});
            mouseListenerExists = true;
        }
    }
    //sort if header clicked
    private void ManagementPlanColumnMouseClicked(java.awt.event.MouseEvent evt)
    {
        int selectedColumnId = managementPlanTable.getTableHeader().columnAtPoint(evt.getPoint());
        //copy original order into another arraylist
        Collections.copy(OriginalStakeholders,Stakeholders);
        //String colName = managementPlanTable.getColumnName(managementPlanTable.getTableHeader().columnAtPoint(evt.getPoint()));
        if (selectedColumnId == 0)
        {
            Collections.sort(Stakeholders, new Comparator<Stakeholder>(){
            public int compare(Stakeholder s1, Stakeholder s2) {
            return s1.getName().compareToIgnoreCase(s2.getName());}});
            managementPlanUpdate();
        }
        if (selectedColumnId == 1)
        {
            Collections.sort(Stakeholders, new Comparator<Stakeholder>(){
            public int compare(Stakeholder s1, Stakeholder s2) {
            return s1.getWants().compareToIgnoreCase(s2.getWants());}});
            managementPlanUpdate();
        }
        if (selectedColumnId == 2)
        {
            Collections.sort(Stakeholders, new Comparator<Stakeholder>(){
            public int compare(Stakeholder s1, Stakeholder s2) {
            return s1.getClassification().compareToIgnoreCase(s2.getClassification());}});
            managementPlanUpdate();
        }
        if (selectedColumnId == 3)
        {
            Collections.sort(Stakeholders, new Comparator<Stakeholder>(){
            public int compare(Stakeholder s1, Stakeholder s2) {
            return s1.getAttitude().compareToIgnoreCase(s2.getAttitude());}});
            managementPlanUpdate();
        }
        if (selectedColumnId == 4)
        {
            Collections.sort(Stakeholders, new Comparator<Stakeholder>(){
            public int compare(Stakeholder s1, Stakeholder s2) {
            return Double.compare(s2.getInfluence(), s1.getInfluence());}});
            managementPlanUpdate();
        }
        if (selectedColumnId == 5)
        {
            Collections.sort(Stakeholders, new Comparator<Stakeholder>(){
            public int compare(Stakeholder s1, Stakeholder s2) {
            return s1.getStrategy().compareToIgnoreCase(s2.getStrategy());}});
            managementPlanUpdate();
        }
        if (selectedColumnId == 6)
        {
            Collections.sort(Stakeholders, new Comparator<Stakeholder>(){
            public int compare(Stakeholder s1, Stakeholder s2) {
            return s1.getEngagement().compareToIgnoreCase(s2.getEngagement());}});
            managementPlanUpdate();
        }
        if (selectedColumnId == 7)
        {
            Collections.sort(Stakeholders, new Comparator<Stakeholder>(){
            public int compare(Stakeholder s1, Stakeholder s2) {
            return s1.getLastEngaged().compareToIgnoreCase(s2.getLastEngaged());}});
            managementPlanUpdate();
        }
        if (selectedColumnId == 8)
        {
            Collections.sort(Stakeholders, new Comparator<Stakeholder>(){
            public int compare(Stakeholder s1, Stakeholder s2) {
            return s1.getResponsible().compareToIgnoreCase(s2.getResponsible());}});
            managementPlanUpdate();
        }
        if (selectedColumnId == 9)
        {
            Collections.sort(Stakeholders, new Comparator<Stakeholder>(){
            public int compare(Stakeholder s1, Stakeholder s2) {
            return s1.getNotes().compareToIgnoreCase(s2.getNotes());}});
            managementPlanUpdate();
        }
    }
    private double classificationConverter(String classification)
    {
        double convertedClassification;
        if (classification.equals("Definitive"))
            convertedClassification = 1.0;
        else if (classification.equals("Dependent"))
            convertedClassification = 2.0/3.0;
        else if (classification.equals("Dangerous"))
            convertedClassification = 2.0/3.0;
        else if (classification.equals("Dominant"))
            convertedClassification = 2.0/3.0;
        else if (classification.equals("Demanding"))
            convertedClassification = 1.0/3.0;
        else if (classification.equals("Dormant"))
            convertedClassification = 1.0/3.0;
        else if (classification.equals("Discretionary"))
            convertedClassification = 1.0/3;
        else
            convertedClassification = 0;
        return convertedClassification;
    }
    
    private double attitudeConverter(String attitude)
    {
        double convertedAttitude;
        if (attitude.equals("Supportive"))
            convertedAttitude = 0;
        else if (attitude.equals("Mixed"))
            convertedAttitude = 1.0/3.0;
        else if (attitude.equals("Marginal"))
            convertedAttitude = 2.0/3.0;
        else 
            convertedAttitude = 1.0;
        return convertedAttitude;
    }
    
    private double influenceConverter(int magnitude)
    {
        double convertedMagnitude;
        if (magnitude == Relationship.HIGH)
            convertedMagnitude = 1.0;
        else if (magnitude == Relationship.MEDIUM)
            convertedMagnitude = 0.5;
        else if (magnitude == Relationship.LOW)
            convertedMagnitude = 0.25;
        else 
            convertedMagnitude = 0;
        return convertedMagnitude;
    }
    
    private void situationalInfluenceUpdate()
    {   
        //array to hold each stakeholder's numerator value
        double[] stakeholderNumerators = new double[Stakeholders.size()];
        double stakeholderDenominator = 0;
        //tally up each stakeholder's list of relationships
        for (int i = 0; i < Stakeholders.size(); i++)
        {
            //temp Relationship to hold stakeholder's relationship
            Relationship buddy;
            //temp arrayList to hold stakeholder's relationships
            ArrayList <Relationship> tempRelationships = new ArrayList<>();
                    for(Relationship partner: Stakeholders.get(i).getInfluences()){
                        buddy = new Relationship(partner);
                        tempRelationships.add(buddy);}
            double stakeholderInfluenceNumerator = 0;
            double magnitudeValue;
            double classificationValue;
            double attitudeValue;
            //iterate through each stakeholder's relationships
            for (int j = 0; j < tempRelationships.size(); j++)
            {
                magnitudeValue = influenceConverter(tempRelationships.get(j).getMagnitude());
                classificationValue = classificationConverter(Stakeholders.get(j).getClassification());
                attitudeValue = attitudeConverter(Stakeholders.get(j).getAttitude());
                stakeholderInfluenceNumerator += (magnitudeValue*classificationValue*attitudeValue);
            }
            //store stakeholder's influence number in array
            stakeholderNumerators[i] = stakeholderInfluenceNumerator;
            stakeholderDenominator += stakeholderInfluenceNumerator;
        }//end of get each stakeholder's influence numerator loop
        //calculate each stakeholder's situational influence
        for (int i = 0; i < Stakeholders.size(); i++)
        {
            double situationalInfluence = stakeholderNumerators[i]/stakeholderDenominator;
            //save each stakeholder's individual situational influence
            Stakeholders.get(i).setInfluence(situationalInfluence);
        }
    }

    private void mainTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mainTabbedPaneStateChanged
        // TODO add your handling code here:
        if (evt.getSource() instanceof JTabbedPane) 
        {
           JTabbedPane pane = (JTabbedPane) evt.getSource();
           Component currentTab = mainTabbedPane.getSelectedComponent();
           if(currentTab.equals(relationMapParentPanel)){
               JGraphPanel.updateShVertexList(Stakeholders);
               if(!miniMapCreated)
               {
                   miniMapWindow();
                   miniMapCreated = true;
               }
               miniMapDialogBox.setVisible(true);
           }
           else if(currentTab.equals(classificationPanel)){
               if(miniMapCreated)
                    miniMapDialogBox.setVisible(false);
               classificationDiagramUpdate();
           }
           else if(currentTab.equals(actionPanel)){
               if(miniMapCreated)
                    miniMapDialogBox.setVisible(false);
               actionTableUpdate();
           }
           else if(currentTab.equals(influencePanel)){
               if(miniMapCreated)
                    miniMapDialogBox.setVisible(false);
               influenceTableUpdate();
           }
           else if(currentTab.equals(managementPlanPanel)){
               if(miniMapCreated)
                    miniMapDialogBox.setVisible(false);
               situationalInfluenceUpdate();
               viewManagementPlan();
           }
           else{
               if(miniMapCreated)
                    miniMapDialogBox.setVisible(false);
               updateStakehodlerList();
               System.out.println("update catch branch failed for: tab " 
                       +mainTabbedPane.indexOfComponent(currentTab)
                       +"\n Component: "+currentTab.toString());
           }
        }
    }//GEN-LAST:event_mainTabbedPaneStateChanged

    private void influenceSaveButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_influenceSaveButtonMouseClicked
        // TODO add your handling code here:
        influenceLabel1.setText(" ");
        influenceLabel2.setText(" ");
        influenceLabel3.setText(" ");
        relationshipUpdate();
        
    }//GEN-LAST:event_influenceSaveButtonMouseClicked

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        // TODO add your handling code here:
        int returnVal = saveFileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = saveFileChooser.getSelectedFile();
            System.out.println(file.toString());
            ProjectStore project = ProjectStore.getInstance();
            project.saveProject(file.getPath(), Stakeholders, file.getName(), null, null, null);
        }
        saveMenuItemIsUsed = true; 
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void newMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuItemActionPerformed
        String newPopUp = "Are you sure you want to start a new project?\n All unsaved progress will be lost.";
        int confirm = JOptionPane.showConfirmDialog(null, newPopUp, "Confirm new project creation", JOptionPane.OK_CANCEL_OPTION);
        if (confirm == 0)
        {
            //erase contents of Stakeholders arraylist
            Stakeholders.clear();
            updateStakehodlerList();
            mainTabbedPane.setSelectedComponent(StakeholdersPanel);
            InformationLabel.setText("New Project");
        }
    }//GEN-LAST:event_newMenuItemActionPerformed

    private void contentTableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_contentTableFocusGained
        // TODO add your handling code here:
        String row;
        String column;
        String magnitude;
        row = Stakeholders.get(contentTable.getSelectedRow()).getName();
        column = Stakeholders.get(contentTable.getSelectedColumn()).getName();
        magnitude = (String)contentTable.getValueAt(contentTable.getSelectedRow(), contentTable.getSelectedColumn());
        if (contentTable.getSelectedRow() == contentTable.getSelectedColumn())
        {
            influenceLabel1.setForeground(Color.red);
            influenceLabel2.setForeground(Color.red);
            influenceLabel3.setForeground(Color.red);
            influenceLabel1.setText("Error: " + row);
            influenceLabel2.setText(" cannot have a relationship ");
            influenceLabel3.setText("with itself. ");
        }
        else
        {
            influenceLabel1.setForeground(Color.black);
            influenceLabel2.setForeground(Color.black);
            influenceLabel3.setForeground(Color.black);
            influenceLabel1.setText(row);
            influenceLabel2.setText("has a " + magnitude + " influence on ");
            influenceLabel3.setText(column);
        }
    }//GEN-LAST:event_contentTableFocusGained

    private void managementPlanTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_managementPlanTablePropertyChange
        // TODO add your handling code here:
        JTable target = (JTable)evt.getSource();
        int row = target.getSelectedRow();
        int column = target.getSelectedColumn();
        
       
        //prevent ArrayIndexOutOfBounds problems at startup
            if (column > 9){column = 9;}
            if (column < 0){column = 0;}
            if (row < 0 ){row = 0;}
        // do some action
        String name = (String) target.getValueAt(row, 0);
        int stakeholderToEdit = 0;
        for(int i = 0; i < Stakeholders.size(); i++) {
            if(Stakeholders.get(i).getName().equals(name))
                stakeholderToEdit = i;
        }
        String newEntry = (String)target.getValueAt(row, column);
        if (column == 6)
        { Stakeholders.get(stakeholderToEdit).setEngagement(newEntry); }
        else if (column == 7)
        { Stakeholders.get(stakeholderToEdit).setLastEngaged(newEntry); }
        else if (column == 8)
        { Stakeholders.get(stakeholderToEdit).setResponsible(newEntry); }
        else if (column == 9)
        { Stakeholders.get(stakeholderToEdit).setNotes(newEntry); }
        else {}
    }//GEN-LAST:event_managementPlanTablePropertyChange

    private void securityMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_securityMenuItemActionPerformed
        securityWindow();
    }//GEN-LAST:event_securityMenuItemActionPerformed
   
    private void classificationDiagramUpdate()
    {
        NonStakeHolderList.removeAllItems();
        DormantStakeHolderList.removeAllItems();
        DiscretionaryStakeHolderList.removeAllItems();
        DominantStakeHolderList.removeAllItems();
        DefinitiveStakeHolderList.removeAllItems();
        DangerousStakeHolderList.removeAllItems();
        DependentStakeHolderList.removeAllItems();
        DemandingStakeHolderList.removeAllItems();
        for(int i = 0;i < Stakeholders.size();i++)
            if(Stakeholders.get(i).getClassification().equals("Non-Stakeholder"))
                NonStakeHolderList.addItem(Stakeholders.get(i).getName());
            else if(Stakeholders.get(i).getClassification().equals("Dormant"))
               DormantStakeHolderList.addItem(Stakeholders.get(i).getName());
            else if(Stakeholders.get(i).getClassification().equals("Discretionary"))
               DiscretionaryStakeHolderList.addItem(Stakeholders.get(i).getName());
            else if(Stakeholders.get(i).getClassification().equals("Dominant"))
               DominantStakeHolderList.addItem(Stakeholders.get(i).getName());
            else if(Stakeholders.get(i).getClassification().equals("Definitive"))
               DefinitiveStakeHolderList.addItem(Stakeholders.get(i).getName());
            else if(Stakeholders.get(i).getClassification().equals("Dangerous"))
               DangerousStakeHolderList.addItem(Stakeholders.get(i).getName());
            else if(Stakeholders.get(i).getClassification().equals("Dependent"))
               DependentStakeHolderList.addItem(Stakeholders.get(i).getName());
            else 
               DemandingStakeHolderList.addItem(Stakeholders.get(i).getName());
    
    
    }
  
    private void actionTableUpdate()
    {
      Supportive_UndefinedBox.removeAllItems();
      Mixed_UndefinedBox.removeAllItems();
      NonSupportive_UndefinedBox.removeAllItems();
      Marginal_UndefinedBox.removeAllItems();
      Supportive_LatentBox.removeAllItems();
      Mixed_LatentBox.removeAllItems();
      NonSupportive_LatentBox.removeAllItems();
      Marginal_LatentBox.removeAllItems();
      Supportive_ExpectantBox.removeAllItems();
      Mixed_ExpectantBox.removeAllItems();
      NonSupportive_ExpectantBox.removeAllItems();
      Marginal_ExpectantBox.removeAllItems();
      Supportive_DefinitiveBox.removeAllItems();
      Mixed_DefinitiveBox.removeAllItems();
      NonSupportive_DefinitiveBox.removeAllItems();
      Marginal_DefinitiveBox.removeAllItems();
      for(int i = 0; i < Stakeholders.size();i++)
          if(Stakeholders.get(i).getPlacement().equals("Undefined")&&Stakeholders.get(i).getAttitude().equals("Supportive"))
             Supportive_UndefinedBox.addItem(Stakeholders.get(i).getName());
          else if(Stakeholders.get(i).getPlacement().equals("Undefined")&&Stakeholders.get(i).getAttitude().equals("Mixed"))
             Mixed_UndefinedBox.addItem(Stakeholders.get(i).getName());
          else if(Stakeholders.get(i).getPlacement().equals("Undefined")&&Stakeholders.get(i).getAttitude().equals("Non-Supportive"))
             NonSupportive_UndefinedBox.addItem(Stakeholders.get(i).getName());
          else if(Stakeholders.get(i).getPlacement().equals("Undefined")&&Stakeholders.get(i).getAttitude().equals("Marginal"))
             Marginal_UndefinedBox.addItem(Stakeholders.get(i).getName());
          else if(Stakeholders.get(i).getPlacement().equals("Latent")&&Stakeholders.get(i).getAttitude().equals("Supportive"))
             Supportive_LatentBox.addItem(Stakeholders.get(i).getName());
          else if(Stakeholders.get(i).getPlacement().equals("Latent")&&Stakeholders.get(i).getAttitude().equals("Mixed"))
             Mixed_LatentBox.addItem(Stakeholders.get(i).getName());
          else if(Stakeholders.get(i).getPlacement().equals("Latent")&&Stakeholders.get(i).getAttitude().equals("Non-Supportive"))
             NonSupportive_LatentBox.addItem(Stakeholders.get(i).getName());
          else if(Stakeholders.get(i).getPlacement().equals("Latent")&&Stakeholders.get(i).getAttitude().equals("Marginal"))
             Marginal_LatentBox.addItem(Stakeholders.get(i).getName());
          else if(Stakeholders.get(i).getPlacement().equals("Expectant")&&Stakeholders.get(i).getAttitude().equals("Supportive"))
             Supportive_ExpectantBox.addItem(Stakeholders.get(i).getName());
          else if(Stakeholders.get(i).getPlacement().equals("Expectant")&&Stakeholders.get(i).getAttitude().equals("Mixed"))
             Mixed_ExpectantBox.addItem(Stakeholders.get(i).getName());
          else if(Stakeholders.get(i).getPlacement().equals("Expectant")&&Stakeholders.get(i).getAttitude().equals("Non-Supportive"))
             NonSupportive_ExpectantBox.addItem(Stakeholders.get(i).getName());
          else if(Stakeholders.get(i).getPlacement().equals("Expectant")&&Stakeholders.get(i).getAttitude().equals("Marginal"))
             Marginal_ExpectantBox.addItem(Stakeholders.get(i).getName());
          else if(Stakeholders.get(i).getPlacement().equals("Definitive")&&Stakeholders.get(i).getAttitude().equals("Supportive"))
             Supportive_DefinitiveBox.addItem(Stakeholders.get(i).getName());
          else if(Stakeholders.get(i).getPlacement().equals("Definitive")&&Stakeholders.get(i).getAttitude().equals("Mixed"))
             Mixed_DefinitiveBox.addItem(Stakeholders.get(i).getName());
          else if(Stakeholders.get(i).getPlacement().equals("Definitive")&&Stakeholders.get(i).getAttitude().equals("Non-Supportive"))
             NonSupportive_DefinitiveBox.addItem(Stakeholders.get(i).getName());
          else
              Marginal_DefinitiveBox.addItem(Stakeholders.get(i).getName());   
    }
    
    //export Management plan to CSV
    public void exportManagementToCSV(String filePath) throws FileNotFoundException
    {
            PrintWriter fileOut;
            fileOut = new PrintWriter(filePath);
            String str = str = "Name,Wants,Classification,Attitude,Influence,"
                    +"Strategy,Method of Engagement,"
                    +"Last Engaged,Responsible Party,Notes,";
            fileOut.println(str);
            for(Stakeholder sh : Stakeholders)
            {
                sh.exportStakeholderCSV(fileOut);
            }
            fileOut.close();
    }
    
    public void securityWindow()
    {
        securityDialogBox.defaultInit(isEncrypted);
        securityDialogBox.setResizable(false);
        securityDialogBox.setVisible(true);
        securityDialogBox.setDefaultCloseOperation(HIDE_ON_CLOSE);
        /*According to testing, the program should not execute this code until
         the securityJDialog has been closed or hidden. This may not be
         gauranteed though.*/
        isEncrypted = securityDialogBox.getEncryptionChoice();
        if(isEncrypted)
            password = securityDialogBox.getPassword();
        System.out.println("<pswd>" + password + "</pswd>");
    }
    
    //This is called once and only once. It creates the dialog box for the Rel Map
    //The rest of the time, it is just its visibility that is toggled to make it disappear
    public void miniMapWindow()
    {
        miniMapDialogBox = new RelationMapDialogBox(this, "Graph Tool Box", false, JGraphPanel.getGraphComponent());
        miniMapDialogBox.addOrganicListener(JGraphPanel.getFastOrganicActionListener());
        miniMapDialogBox.addCircleListener(JGraphPanel.getCircleActionListener());
        miniMapDialogBox.addTreeListener(JGraphPanel.getHierarchicalActionListener());
        miniMapDialogBox.addGraphBtnListener(JGraphPanel.getGraphBtnActionListener());
        miniMapDialogBox.addLineBtnListener(JGraphPanel.getLineSnapActionListener());
        miniMapDialogBox.addExportBtnListener(JGraphPanel.getExportMapActionListener());
        miniMapDialogBox.setDefaultCloseOperation(HIDE_ON_CLOSE);
        miniMapDialogBox.setResizable(false);
    }
    //Creates test Driver window
    private TestDriver testFrame;
    public void testWindow()
    {
        testFrame = new TestDriver(Stakeholders);
        testFrame.setVisible(true);
        testFrame.layoutButtons.get(RelationMapPanel.FASTORGANIC).addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                System.out.println("Fast Organic");
                JGraphPanel.setMxLayout(RelationMapPanel.FASTORGANIC);
            }
        });
        
        testFrame.layoutButtons.get(RelationMapPanel.CIRCLE).addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                System.out.println("Circle");
                JGraphPanel.setMxLayout(RelationMapPanel.CIRCLE);
            }
        });
        
        testFrame.layoutButtons.get(RelationMapPanel.HIERARCHICAL).addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                System.out.println("Hierachical");
                JGraphPanel.setMxLayout(RelationMapPanel.HIERARCHICAL);
            }
        });
        
        testFrame.layoutButtons.get(RelationMapPanel.COMPACTTREE).addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                System.out.println("Compact Tree");
                JGraphPanel.setMxLayout(RelationMapPanel.COMPACTTREE);
            }
        });
        
        testFrame.layoutButtons.get(RelationMapPanel.PARALLEL).addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                JGraphPanel.setMxLayout(RelationMapPanel.PARALLEL);
            }
        });
        
        testFrame.layoutButtons.get(RelationMapPanel.STACK).addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                System.out.println("Stack");
                JGraphPanel.setMxLayout(RelationMapPanel.STACK);
            }
        });
        
        testFrame.morphButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                JGraphPanel.graph();
            }
        });
        
        testFrame.updateShListButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                updateStakehodlerList();
            }
        });
        
        testFrame.parallelButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                JGraphPanel.snapEdgesToFit();
            }
        });
        
        
        testFrame.exportManagementPlanButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                try {
                    exportManagementToCSV("managementPlan.csv");
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(STATUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(STATUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        try
        {
            Thread.sleep(3000);
        }
        catch(InterruptedException ex)
        {
        
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new STATUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddStakeholderButton;
    private javax.swing.JLabel CooperationLabel;
    private javax.swing.JRadioButton CooperationNRadioButton;
    private javax.swing.JRadioButton CooperationYRadioButton;
    private javax.swing.ButtonGroup CooperationbuttonGroup;
    private javax.swing.JComboBox DangerousStakeHolderList;
    private javax.swing.JComboBox DefinitiveStakeHolderList;
    private javax.swing.JComboBox DemandingStakeHolderList;
    private javax.swing.JComboBox DependentStakeHolderList;
    private javax.swing.JComboBox DiscretionaryStakeHolderList;
    private javax.swing.JComboBox DominantStakeHolderList;
    private javax.swing.JComboBox DormantStakeHolderList;
    private javax.swing.JLabel InformationLabel;
    private mySTAT.RelationMapPanel JGraphPanel;
    private javax.swing.JLabel LegitimacyLabel;
    private javax.swing.JRadioButton LegitimacyNRadioButton;
    private javax.swing.JRadioButton LegitimacyYRadioButton;
    private javax.swing.ButtonGroup LegitimacybuttonGroup;
    private javax.swing.JComboBox Marginal_DefinitiveBox;
    private javax.swing.JComboBox Marginal_ExpectantBox;
    private javax.swing.JComboBox Marginal_LatentBox;
    private javax.swing.JComboBox Marginal_UndefinedBox;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JComboBox Mixed_DefinitiveBox;
    private javax.swing.JComboBox Mixed_ExpectantBox;
    private javax.swing.JComboBox Mixed_LatentBox;
    private javax.swing.JComboBox Mixed_UndefinedBox;
    private javax.swing.JLabel NameLabel;
    private javax.swing.JScrollPane NameScrollPane;
    private javax.swing.JTextArea NameTextArea;
    private javax.swing.JComboBox NonStakeHolderList;
    private javax.swing.JComboBox NonSupportive_DefinitiveBox;
    private javax.swing.JComboBox NonSupportive_ExpectantBox;
    private javax.swing.JComboBox NonSupportive_LatentBox;
    private javax.swing.JComboBox NonSupportive_UndefinedBox;
    private javax.swing.JLabel PotentialLabel;
    private javax.swing.JLabel PowerLabel;
    private javax.swing.JRadioButton PowerNRadioButton;
    private javax.swing.JRadioButton PowerYRadioButton;
    private javax.swing.ButtonGroup PowerbuttonGroup;
    private javax.swing.ButtonGroup SHCooperationButtons;
    private javax.swing.JLabel SHCooperationLabel;
    private javax.swing.JRadioButton SHCooperationNRadioButton;
    private javax.swing.JRadioButton SHCooperationYRadioButton;
    private javax.swing.JButton SHEditButton;
    private javax.swing.ButtonGroup SHLegitimacyButtons;
    private javax.swing.JLabel SHLegitimacyLabel;
    private javax.swing.JRadioButton SHLegitimacyNRadioButton;
    private javax.swing.JRadioButton SHLegitimacyYRadioButton;
    private javax.swing.JLabel SHNameLabel;
    private javax.swing.JScrollPane SHNameScrollPane;
    private javax.swing.JTextArea SHNameTextArea;
    private javax.swing.JPanel SHPanel;
    private javax.swing.JLabel SHPotentialLabel;
    private javax.swing.ButtonGroup SHPowerButtons;
    private javax.swing.JLabel SHPowerLabel;
    private javax.swing.JRadioButton SHPowerNRadioButton;
    private javax.swing.JRadioButton SHPowerYRadioButton;
    private javax.swing.JButton SHRemoveButton;
    private javax.swing.JButton SHSaveButton;
    private javax.swing.ButtonGroup SHThreatButtons;
    private javax.swing.JLabel SHThreatLabel;
    private javax.swing.JRadioButton SHThreatNRadioButton;
    private javax.swing.JRadioButton SHThreatYRadioButton;
    private javax.swing.ButtonGroup SHUrgencyButtons;
    private javax.swing.JLabel SHUrgencyLabel;
    private javax.swing.JRadioButton SHUrgencyNRadioButton;
    private javax.swing.JRadioButton SHUrgencyYRadioButton;
    private javax.swing.JLabel SHWantsLabel;
    private javax.swing.JScrollPane SHWantsScrollPane;
    private javax.swing.JTextArea SHWantsTextArea;
    private javax.swing.JList StakeholderList;
    private javax.swing.JLabel StakeholderListLabel;
    private javax.swing.JScrollPane StakeholderScrollPane;
    private javax.swing.JPanel StakeholdersPanel;
    private javax.swing.JComboBox Supportive_DefinitiveBox;
    private javax.swing.JComboBox Supportive_ExpectantBox;
    private javax.swing.JComboBox Supportive_LatentBox;
    private javax.swing.JComboBox Supportive_UndefinedBox;
    private javax.swing.JLabel ThreatLabel;
    private javax.swing.JRadioButton ThreatNRadioButton;
    private javax.swing.JRadioButton ThreatYRadioButton;
    private javax.swing.ButtonGroup ThreatbuttonGroup;
    private javax.swing.JLabel UrgencyLabel;
    private javax.swing.JRadioButton UrgencyNRadioButton;
    private javax.swing.JRadioButton UrgencyYRadioButton;
    private javax.swing.ButtonGroup UrgencybuttonGroup;
    private javax.swing.JLabel WantsLabel;
    private javax.swing.JScrollPane WantsScrollPane;
    private javax.swing.JTextArea WantsTextArea;
    private javax.swing.JLabel actionLabel;
    private javax.swing.JLayeredPane actionLayeredPane;
    private javax.swing.JPanel actionPanel;
    private javax.swing.JTable catcherTable;
    private javax.swing.JLayeredPane classLayeredPane;
    private javax.swing.JPanel classificationPanel;
    private javax.swing.JTable contentTable;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenuItem exportMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel influenceLabel1;
    private javax.swing.JLabel influenceLabel2;
    private javax.swing.JLabel influenceLabel3;
    private javax.swing.JPanel influenceMatrixPanel;
    private javax.swing.JPanel influencePanel;
    private javax.swing.JButton influenceSaveButton;
    private javax.swing.JScrollPane influenceScrollPane;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JTabbedPane mainTabbedPane;
    private javax.swing.JPanel managementPlanPanel;
    private javax.swing.JScrollPane managementPlanScrollPane;
    private javax.swing.JTable managementPlanTable;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JFileChooser openFileChooser;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JTable pitcherTable;
    private javax.swing.JPanel relationMapParentPanel;
    private javax.swing.JScrollPane relationMapScrollPane;
    private javax.swing.JFileChooser saveFileChooser;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JMenuItem securityMenuItem;
    private javax.swing.JPanel stakeholdersPanel;
    private javax.swing.JLabel vennLabel;
    // End of variables declaration//GEN-END:variables

    private void managmementPlanUpdate() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    private SecurityJDialog securityDialogBox;
    private boolean isEncrypted;
    private String password;
    private RelationMapDialogBox miniMapDialogBox;
    private boolean miniMapCreated;
}

